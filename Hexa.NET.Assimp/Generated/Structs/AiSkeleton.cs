// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// <br/>
	/// Skeleton animations can be described as a tree of bones:<br/>
	/// root<br/>
	/// |<br/>
	/// node1<br/>
	/// /   <br/>
	/// \<br/>
	/// node3  node4<br/>
	/// If you want to calculate the transformation of node three you need to compute the<br/>
	/// transformation hierarchy for the transformation chain of node3:<br/>
	/// root->node1->node3<br/>
	/// Each node is represented as a skeleton instance.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiSkeleton")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiSkeleton
	{
		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MName;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumBones")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumBones;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mBones")]
		[NativeName(NativeNameType.Type, "aiSkeletonBone * *")]
		public unsafe AiSkeletonBone** MBones;


		public unsafe AiSkeleton(AiString mName = default, uint mNumBones = default, AiSkeletonBone** mBones = default)
		{
			MName = mName;
			MNumBones = mNumBones;
			MBones = mBones;
		}


	}

}
