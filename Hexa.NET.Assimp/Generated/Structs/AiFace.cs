// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// <br/>
	/// If mNumIndices is 3, we call the face 'triangle', for mNumIndices > 3<br/>
	/// it's called 'polygon' (hey, that's just a definition!).<br/>
	/// <br/>
	/// aiMesh::mPrimitiveTypes can be queried to quickly examine which types of<br/>
	/// primitive are actually present in a mesh. The #aiProcess_SortByPType flag<br/>
	/// executes a special post-processing algorithm which splits meshes with<br/>
	/// *different* primitive types mixed up (e.g. lines and triangles) in several<br/>
	/// 'clean' sub-meshes. Furthermore there is a configuration option (<br/>
	/// #AI_CONFIG_PP_SBP_REMOVE) to force #aiProcess_SortByPType to remove<br/>
	/// specific kinds of primitives from the imported scene, completely and forever.<br/>
	/// In many cases you'll probably want to set this setting to<br/>
	/// <br/>
	/// Together with the #aiProcess_Triangulate flag you can then be sure that<br/>
	/// #aiFace::mNumIndices is always 3.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiFace")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiFace
	{
		/// <summary>
		/// Number of indices defining this face.<br/>
		/// The maximum value for this member is #AI_MAX_FACE_INDICES.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumIndices")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumIndices;

		/// <summary>
		/// Pointer to the indices array. Size of the array is given in numIndices.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mIndices")]
		[NativeName(NativeNameType.Type, "unsigned int *")]
		public unsafe uint* MIndices;


		public unsafe AiFace(uint mNumIndices = default, uint* mIndices = default)
		{
			MNumIndices = mNumIndices;
			MIndices = mIndices;
		}


	}

}
