// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// Helper structure to describe a virtual camera.<br/>
	/// Cameras have a representation in the node graph and can be animated.<br/>
	/// An important aspect is that the camera itself is also part of the<br/>
	/// scene-graph. This means, any values such as the look-at vector are not<br/>
	/// *absolute*, they're <br/>
	/// relative<br/>
	/// to the coordinate system defined<br/>
	/// by the node which corresponds to the camera. This allows for camera<br/>
	/// animations. For static cameras parameters like the 'look-at' or 'up' vectors<br/>
	/// are usually specified directly in aiCamera, but beware, they could also<br/>
	/// be encoded in the node transformation. The following (pseudo)code sample<br/>
	/// shows how to do it: <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiCamera")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiCamera
	{
		/// <summary>
		/// The name of the camera.<br/>
		/// There must be a node in the scenegraph with the same name.<br/>
		/// This node specifies the position of the camera in the scene<br/>
		/// hierarchy and can be animated.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MName;

		/// <summary>
		/// Position of the camera relative to the coordinate space<br/>
		/// defined by the corresponding node.<br/>
		/// The default value is 0|0|0.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mPosition")]
		[NativeName(NativeNameType.Type, "aiVector3D")]
		public Vector3 MPosition;

		/// <summary>
		/// 'Up' - vector of the camera coordinate system relative to<br/>
		/// the coordinate space defined by the corresponding node.<br/>
		/// The 'right' vector of the camera coordinate system is<br/>
		/// the cross product of  the up and lookAt vectors.<br/>
		/// The default value is 0|1|0. The vector<br/>
		/// may be normalized, but it needn't.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mUp")]
		[NativeName(NativeNameType.Type, "aiVector3D")]
		public Vector3 MUp;

		/// <summary>
		/// 'LookAt' - vector of the camera coordinate system relative to<br/>
		/// the coordinate space defined by the corresponding node.<br/>
		/// This is the viewing direction of the user.<br/>
		/// The default value is 0|0|1. The vector<br/>
		/// may be normalized, but it needn't.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mLookAt")]
		[NativeName(NativeNameType.Type, "aiVector3D")]
		public Vector3 MLookAt;

		/// <summary>
		/// Horizontal field of view angle, in radians.<br/>
		/// The field of view angle is the angle between the center<br/>
		/// line of the screen and the left or right border.<br/>
		/// The default value is 1/4PI.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mHorizontalFOV")]
		[NativeName(NativeNameType.Type, "float")]
		public float MHorizontalFOV;

		/// <summary>
		/// Distance of the near clipping plane from the camera.<br/>
		/// The value may not be 0.f (for arithmetic reasons to prevent<br/>
		/// a division through zero). The default value is 0.1f.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mClipPlaneNear")]
		[NativeName(NativeNameType.Type, "float")]
		public float MClipPlaneNear;

		/// <summary>
		/// Distance of the far clipping plane from the camera.<br/>
		/// The far clipping plane must, of course, be further away than the<br/>
		/// near clipping plane. The default value is 1000.f. The ratio<br/>
		/// between the near and the far plane should not be too<br/>
		/// large (between 1000-10000 should be ok) to avoid floating-point<br/>
		/// inaccuracies which could lead to z-fighting.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mClipPlaneFar")]
		[NativeName(NativeNameType.Type, "float")]
		public float MClipPlaneFar;

		/// <summary>
		/// Screen aspect ratio.<br/>
		/// This is the ration between the width and the height of the<br/>
		/// screen. Typical values are 4/3, 1/2 or 1/1. This value is<br/>
		/// 0 if the aspect ratio is not defined in the source file.<br/>
		/// 0 is also the default value.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mAspect")]
		[NativeName(NativeNameType.Type, "float")]
		public float MAspect;

		/// <summary>
		/// Half horizontal orthographic width, in scene units.<br/>
		/// The orthographic width specifies the half width of the<br/>
		/// orthographic view box. If non-zero the camera is<br/>
		/// orthographic and the mAspect should define to the<br/>
		/// ratio between the orthographic width and height<br/>
		/// and mHorizontalFOV should be set to 0.<br/>
		/// The default value is 0 (not orthographic).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mOrthographicWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float MOrthographicWidth;


		public unsafe AiCamera(AiString mName = default, Vector3 mPosition = default, Vector3 mUp = default, Vector3 mLookAt = default, float mHorizontalFOV = default, float mClipPlaneNear = default, float mClipPlaneFar = default, float mAspect = default, float mOrthographicWidth = default)
		{
			MName = mName;
			MPosition = mPosition;
			MUp = mUp;
			MLookAt = mLookAt;
			MHorizontalFOV = mHorizontalFOV;
			MClipPlaneNear = mClipPlaneNear;
			MClipPlaneFar = mClipPlaneFar;
			MAspect = mAspect;
			MOrthographicWidth = mOrthographicWidth;
		}


	}

}
