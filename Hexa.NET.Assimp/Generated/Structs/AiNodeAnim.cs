// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// Describes the animation of a single node. The name specifies the<br/>
	/// bone/node which is affected by this animation channel. The keyframes<br/>
	/// are given in three separate series of values, one each for position,<br/>
	/// rotation and scaling. The transformation matrix computed from these<br/>
	/// values replaces the node's original transformation matrix at a<br/>
	/// specific time.<br/>
	/// This means all keys are absolute and not relative to the bone default pose.<br/>
	/// The order in which the transformations are applied is<br/>
	/// - as usual - scaling, rotation, translation.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiNodeAnim")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiNodeAnim
	{
		/// <summary>
		/// The name of the node affected by this animation. The node<br/>
		/// must exist and it must be unique.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNodeName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MNodeName;

		/// <summary>
		/// The number of position keys <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumPositionKeys")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumPositionKeys;

		/// <summary>
		/// The position keys of this animation channel. Positions are<br/>
		/// specified as 3D vector. The array is mNumPositionKeys in size.<br/>
		/// If there are position keys, there will also be at least one<br/>
		/// scaling and one rotation key.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mPositionKeys")]
		[NativeName(NativeNameType.Type, "aiVectorKey *")]
		public unsafe AiVectorKey* MPositionKeys;

		/// <summary>
		/// The number of rotation keys <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumRotationKeys")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumRotationKeys;

		/// <summary>
		/// The rotation keys of this animation channel. Rotations are<br/>
		/// given as quaternions,  which are 4D vectors. The array is<br/>
		/// mNumRotationKeys in size.<br/>
		/// If there are rotation keys, there will also be at least one<br/>
		/// scaling and one position key. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mRotationKeys")]
		[NativeName(NativeNameType.Type, "aiQuatKey *")]
		public unsafe AiQuatKey* MRotationKeys;

		/// <summary>
		/// The number of scaling keys <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumScalingKeys")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumScalingKeys;

		/// <summary>
		/// The scaling keys of this animation channel. Scalings are<br/>
		/// specified as 3D vector. The array is mNumScalingKeys in size.<br/>
		/// If there are scaling keys, there will also be at least one<br/>
		/// position and one rotation key.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mScalingKeys")]
		[NativeName(NativeNameType.Type, "aiVectorKey *")]
		public unsafe AiVectorKey* MScalingKeys;

		/// <summary>
		/// Defines how the animation behaves before the first<br/>
		/// key is encountered.<br/>
		/// The default value is aiAnimBehaviour_DEFAULT (the original<br/>
		/// transformation matrix of the affected node is used).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mPreState")]
		[NativeName(NativeNameType.Type, "aiAnimBehaviour")]
		public AiAnimBehaviour MPreState;

		/// <summary>
		/// Defines how the animation behaves after the last<br/>
		/// key was processed.<br/>
		/// The default value is aiAnimBehaviour_DEFAULT (the original<br/>
		/// transformation matrix of the affected node is taken).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mPostState")]
		[NativeName(NativeNameType.Type, "aiAnimBehaviour")]
		public AiAnimBehaviour MPostState;


		public unsafe AiNodeAnim(AiString mNodeName = default, uint mNumPositionKeys = default, AiVectorKey* mPositionKeys = default, uint mNumRotationKeys = default, AiQuatKey* mRotationKeys = default, uint mNumScalingKeys = default, AiVectorKey* mScalingKeys = default, AiAnimBehaviour mPreState = default, AiAnimBehaviour mPostState = default)
		{
			MNodeName = mNodeName;
			MNumPositionKeys = mNumPositionKeys;
			MPositionKeys = mPositionKeys;
			MNumRotationKeys = mNumRotationKeys;
			MRotationKeys = mRotationKeys;
			MNumScalingKeys = mNumScalingKeys;
			MScalingKeys = mScalingKeys;
			MPreState = mPreState;
			MPostState = mPostState;
		}


	}

}
