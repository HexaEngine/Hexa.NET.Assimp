// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// Data structure to represent the bit pattern of a 64 Bit<br/>
	/// IEEE 754 floating-point number. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_IEEEDouble")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct IEEEDouble
	{
		[NativeName(NativeNameType.StructOrClass, "_IEEEDouble::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct IEEEUnion
		{
			[NativeName(NativeNameType.Field, "Frac")]
			[NativeName(NativeNameType.Type, "uint64_t")]
			public ulong Frac;
			[NativeName(NativeNameType.Field, "Exp")]
			[NativeName(NativeNameType.Type, "uint64_t")]
			public ulong Exp;
			[NativeName(NativeNameType.Field, "Sign")]
			[NativeName(NativeNameType.Type, "uint64_t")]
			public ulong Sign;

			public unsafe IEEEUnion(ulong frac = default, ulong exp = default, ulong sign = default)
			{
				Frac = frac;
				Exp = exp;
				Sign = sign;
			}


		}

		[NativeName(NativeNameType.Field, "Double")]
		[NativeName(NativeNameType.Type, "double")]
		[FieldOffset(0)]
		public double Double;
		[NativeName(NativeNameType.Field, "IEEE")]
		[NativeName(NativeNameType.Type, "")]
		[FieldOffset(0)]
		public IEEEUnion IEEE;

		public unsafe IEEEDouble(double @double = default, IEEEUnion ieee = default)
		{
			Double = @double;
			IEEE = ieee;
		}


	}

}
