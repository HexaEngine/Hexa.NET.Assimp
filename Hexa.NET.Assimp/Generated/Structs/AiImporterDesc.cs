// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// Meta information about a particular importer. Importers need to fill<br/>
	/// this structure, but they can freely decide how talkative they are.<br/>
	/// A common use case for loader meta info is a user interface<br/>
	/// in which the user can choose between various import/export file<br/>
	/// formats. Building such an UI by hand means a lot of maintenance<br/>
	/// as importers/exporters are added to Assimp, so it might be useful<br/>
	/// to have a common mechanism to query some rough importer<br/>
	/// characteristics. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiImporterDesc")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiImporterDesc
	{
		/// <summary>
		/// Full name of the importer (i.e. Blender3D importer)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* MName;

		/// <summary>
		/// Original author (left blank if unknown or whole assimp team) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mAuthor")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* MAuthor;

		/// <summary>
		/// Current maintainer, left blank if the author maintains <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMaintainer")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* MMaintainer;

		/// <summary>
		/// Implementation comments, i.e. unimplemented features<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mComments")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* MComments;

		/// <summary>
		/// These flags indicate some characteristics common to many<br/>
		/// importers. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MFlags;

		/// <summary>
		/// Minimum format version that can be loaded im major.minor format,<br/>
		/// both are set to 0 if there is either no version scheme<br/>
		/// or if the loader doesn't care. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMinMajor")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MMinMajor;

		[NativeName(NativeNameType.Field, "mMinMinor")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MMinMinor;
		/// <summary>
		/// Maximum format version that can be loaded im major.minor format,<br/>
		/// both are set to 0 if there is either no version scheme<br/>
		/// or if the loader doesn't care. Loaders that expect to be<br/>
		/// forward-compatible to potential future format versions should<br/>
		/// indicate  zero, otherwise they should specify the current<br/>
		/// maximum version.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMaxMajor")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MMaxMajor;

		[NativeName(NativeNameType.Field, "mMaxMinor")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MMaxMinor;
		/// <summary>
		/// List of file extensions this importer can handle.<br/>
		/// List entries are separated by space characters.<br/>
		/// All entries are lower case without a leading dot (i.e.<br/>
		/// "xml dae" would be a valid value. Note that multiple<br/>
		/// importers may respond to the same file extension -<br/>
		/// assimp calls all importers in the order in which they<br/>
		/// are registered and each importer gets the opportunity<br/>
		/// to load the file until one importer "claims" the file. Apart<br/>
		/// from file extension checks, importers typically use<br/>
		/// other methods to quickly reject files (i.e. magic<br/>
		/// words) so this does not mean that common or generic<br/>
		/// file extensions such as XML would be tediously slow. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mFileExtensions")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* MFileExtensions;


		public unsafe AiImporterDesc(byte* mName = default, byte* mAuthor = default, byte* mMaintainer = default, byte* mComments = default, uint mFlags = default, uint mMinMajor = default, uint mMinMinor = default, uint mMaxMajor = default, uint mMaxMinor = default, byte* mFileExtensions = default)
		{
			MName = mName;
			MAuthor = mAuthor;
			MMaintainer = mMaintainer;
			MComments = mComments;
			MFlags = mFlags;
			MMinMajor = mMinMajor;
			MMinMinor = mMinMinor;
			MMaxMajor = mMaxMajor;
			MMaxMinor = mMaxMinor;
			MFileExtensions = mFileExtensions;
		}


	}

}
