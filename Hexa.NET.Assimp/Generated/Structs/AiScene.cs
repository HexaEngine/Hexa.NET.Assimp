// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// -------------------------------------------------------------------------------<br/>
	/// The root structure of the imported data.<br/>
	/// Everything that was imported from the given file can be accessed from here.<br/>
	/// Objects of this class are generally maintained and owned by Assimp, not<br/>
	/// by the caller. You shouldn't want to instance it, nor should you ever try to<br/>
	/// delete a given scene on your own.<br/>
	/// -------------------------------------------------------------------------------<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiScene")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiScene
	{
		/// <summary>
		/// Any combination of the AI_SCENE_FLAGS_XXX flags. By default<br/>
		/// this value is 0, no flags are set. Most applications will<br/>
		/// want to reject all scenes with the AI_SCENE_FLAGS_INCOMPLETE<br/>
		/// bit set.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mFlags")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MFlags;

		/// <summary>
		/// The root node of the hierarchy.<br/>
		/// There will always be at least the root node if the import<br/>
		/// was successful (and no special flags have been set).<br/>
		/// Presence of further nodes depends on the format and content<br/>
		/// of the imported file.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mRootNode")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MRootNode;

		/// <summary>
		/// The number of meshes in the scene. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumMeshes")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumMeshes;

		/// <summary>
		/// The array of meshes.<br/>
		/// Use the indices given in the aiNode structure to access<br/>
		/// this array. The array is mNumMeshes in size. If the<br/>
		/// AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always<br/>
		/// be at least ONE material.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMeshes")]
		[NativeName(NativeNameType.Type, "aiMesh * *")]
		public unsafe AiMesh** MMeshes;

		/// <summary>
		/// The number of materials in the scene. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumMaterials")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumMaterials;

		/// <summary>
		/// The array of materials.<br/>
		/// Use the index given in each aiMesh structure to access this<br/>
		/// array. The array is mNumMaterials in size. If the<br/>
		/// AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always<br/>
		/// be at least ONE material.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMaterials")]
		[NativeName(NativeNameType.Type, "aiMaterial * *")]
		public unsafe AiMaterial** MMaterials;

		/// <summary>
		/// The number of animations in the scene. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumAnimations")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumAnimations;

		/// <summary>
		/// The array of animations.<br/>
		/// All animations imported from the given file are listed here.<br/>
		/// The array is mNumAnimations in size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mAnimations")]
		[NativeName(NativeNameType.Type, "aiAnimation * *")]
		public unsafe AiAnimation** MAnimations;

		/// <summary>
		/// The number of textures embedded into the file <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumTextures")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumTextures;

		/// <summary>
		/// The array of embedded textures.<br/>
		/// Not many file formats embed their textures into the file.<br/>
		/// An example is Quake's MDL format (which is also used by<br/>
		/// some GameStudio versions)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mTextures")]
		[NativeName(NativeNameType.Type, "aiTexture * *")]
		public unsafe AiTexture** MTextures;

		/// <summary>
		/// The number of light sources in the scene. Light sources<br/>
		/// are fully optional, in most cases this attribute will be 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumLights")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumLights;

		/// <summary>
		/// The array of light sources.<br/>
		/// All light sources imported from the given file are<br/>
		/// listed here. The array is mNumLights in size.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mLights")]
		[NativeName(NativeNameType.Type, "aiLight * *")]
		public unsafe AiLight** MLights;

		/// <summary>
		/// The number of cameras in the scene. Cameras<br/>
		/// are fully optional, in most cases this attribute will be 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumCameras")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumCameras;

		/// <summary>
		/// The array of cameras.<br/>
		/// All cameras imported from the given file are listed here.<br/>
		/// The array is mNumCameras in size. The first camera in the<br/>
		/// array (if existing) is the default camera view into<br/>
		/// the scene.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mCameras")]
		[NativeName(NativeNameType.Type, "aiCamera * *")]
		public unsafe AiCamera** MCameras;

		/// <summary>
		/// <br/>
		/// This data contains global metadata which belongs to the scene like<br/>
		/// unit-conversions, versions, vendors or other model-specific data. This<br/>
		/// can be used to store format-specific metadata as well.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMetaData")]
		[NativeName(NativeNameType.Type, "aiMetadata *")]
		public unsafe AiMetadata* MMetaData;

		/// <summary>
		/// The name of the scene itself.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MName;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumSkeletons")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumSkeletons;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mSkeletons")]
		[NativeName(NativeNameType.Type, "aiSkeleton * *")]
		public unsafe AiSkeleton** MSkeletons;

		[NativeName(NativeNameType.Field, "mPrivate")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* MPrivate;

		public unsafe AiScene(uint mFlags = default, AiNode* mRootNode = default, uint mNumMeshes = default, AiMesh** mMeshes = default, uint mNumMaterials = default, AiMaterial** mMaterials = default, uint mNumAnimations = default, AiAnimation** mAnimations = default, uint mNumTextures = default, AiTexture** mTextures = default, uint mNumLights = default, AiLight** mLights = default, uint mNumCameras = default, AiCamera** mCameras = default, AiMetadata* mMetaData = default, AiString mName = default, uint mNumSkeletons = default, AiSkeleton** mSkeletons = default, void* mPrivate = default)
		{
			MFlags = mFlags;
			MRootNode = mRootNode;
			MNumMeshes = mNumMeshes;
			MMeshes = mMeshes;
			MNumMaterials = mNumMaterials;
			MMaterials = mMaterials;
			MNumAnimations = mNumAnimations;
			MAnimations = mAnimations;
			MNumTextures = mNumTextures;
			MTextures = mTextures;
			MNumLights = mNumLights;
			MLights = mLights;
			MNumCameras = mNumCameras;
			MCameras = mCameras;
			MMetaData = mMetaData;
			MName = mName;
			MNumSkeletons = mNumSkeletons;
			MSkeletons = mSkeletons;
			MPrivate = mPrivate;
		}


	}

}
