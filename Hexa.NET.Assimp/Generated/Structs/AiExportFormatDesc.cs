// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// --------------------------------------------------------------------------------<br/>
	/// <br/>
	/// Use #aiGetExportFormatCount() to learn how many export-formats are supported by<br/>
	/// the current Assimp-build and #aiGetExportFormatDescription() to retrieve the<br/>
	/// description of the export format option.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiExportFormatDesc")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiExportFormatDesc
	{
		/// <summary>
		/// a short string ID to uniquely identify the export format. Use this ID string to<br/>
		/// specify which file format you want to export to when calling #aiExportScene().<br/>
		/// Example: "dae" or "obj"<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* Id;

		/// <summary>
		/// A short description of the file format to present to users. Useful if you want<br/>
		/// to allow the user to select an export format.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* Description;

		/// <summary>
		/// Recommended file extension for the exported file in lower case.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fileExtension")]
		[NativeName(NativeNameType.Type, "char const *")]
		public unsafe byte* FileExtension;


		public unsafe AiExportFormatDesc(byte* id = default, byte* description = default, byte* fileExtension = default)
		{
			Id = id;
			Description = description;
			FileExtension = fileExtension;
		}


	}

}
