// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// <br/>
	/// Skeleton-Animations can be represented via a skeleton struct, which describes<br/>
	/// a hierarchical tree assembled from skeleton bones. A bone is linked to a mesh.<br/>
	/// The bone knows its parent bone. If there is no parent bone the parent id is<br/>
	/// marked with -1.<br/>
	/// The skeleton-bone stores a pointer to its used armature. If there is no<br/>
	/// armature this value if set to nullptr.<br/>
	/// A skeleton bone stores its offset-matrix, which is the absolute transformation<br/>
	/// for the bone. The bone stores the locale transformation to its parent as well.<br/>
	/// You can compute the offset matrix by multiplying the hierarchy like:<br/>
	/// Tree: s1 -> s2 -> s3<br/>
	/// Offset-Matrix s3 = locale-s3 * locale-s2 * locale-s1<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiSkeletonBone")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiSkeletonBone
	{
		/// <summary>
		/// The parent bone index, is -1 one if this bone represents the root bone.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mParent")]
		[NativeName(NativeNameType.Type, "int")]
		public int MParent;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mArmature")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MArmature;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNode")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MNode;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumnWeights")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumnWeights;

		/// <summary>
		/// The mesh index, which will get influenced by the weight.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMeshId")]
		[NativeName(NativeNameType.Type, "aiMesh *")]
		public unsafe AiMesh* MMeshId;

		/// <summary>
		/// The influence weights of this bone, by vertex index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mWeights")]
		[NativeName(NativeNameType.Type, "aiVertexWeight *")]
		public unsafe AiVertexWeight* MWeights;

		/// <summary>
		/// Matrix that transforms from bone space to mesh space in bind pose.<br/>
		/// This matrix describes the position of the mesh<br/>
		/// in the local space of this bone when the skeleton was bound.<br/>
		/// Thus it can be used directly to determine a desired vertex position,<br/>
		/// given the world-space transform of the bone when animated,<br/>
		/// and the position of the vertex in mesh space.<br/>
		/// It is sometimes called an inverse-bind matrix,<br/>
		/// or inverse bind pose matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mOffsetMatrix")]
		[NativeName(NativeNameType.Type, "aiMatrix4x4")]
		public Matrix4x4 MOffsetMatrix;

		/// <summary>
		/// Matrix that transforms the locale bone in bind pose.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mLocalMatrix")]
		[NativeName(NativeNameType.Type, "aiMatrix4x4")]
		public Matrix4x4 MLocalMatrix;


		public unsafe AiSkeletonBone(int mParent = default, AiNode* mArmature = default, AiNode* mNode = default, uint mNumnWeights = default, AiMesh* mMeshId = default, AiVertexWeight* mWeights = default, Matrix4x4 mOffsetMatrix = default, Matrix4x4 mLocalMatrix = default)
		{
			MParent = mParent;
			MArmature = mArmature;
			MNode = mNode;
			MNumnWeights = mNumnWeights;
			MMeshId = mMeshId;
			MWeights = mWeights;
			MOffsetMatrix = mOffsetMatrix;
			MLocalMatrix = mLocalMatrix;
		}


	}

}
