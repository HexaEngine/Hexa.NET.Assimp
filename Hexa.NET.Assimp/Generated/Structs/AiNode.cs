// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// Forward declare aiNode (pointer use only)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiNode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiNode
	{
		/// <summary>
		/// The name of the node.<br/>
		/// The name might be empty (length of zero) but all nodes which<br/>
		/// need to be referenced by either bones or animations are named.<br/>
		/// Multiple nodes may have the same name, except for nodes which are referenced<br/>
		/// by bones (see #aiBone and #aiMesh::mBones). Their names *must* be unique.<br/>
		/// Cameras and lights reference a specific node by name - if there<br/>
		/// are multiple nodes with this name, they are assigned to each of them.<br/>
		/// <br/>
		/// There are no limitations with regard to the characters contained in<br/>
		/// the name string as it is usually taken directly from the source file.<br/>
		/// Implementations should be able to handle tokens such as whitespace, tabs,<br/>
		/// line feeds, quotation marks, ampersands etc.<br/>
		/// Sometimes assimp introduces new nodes not present in the source file<br/>
		/// into the hierarchy (usually out of necessity because sometimes the<br/>
		/// source hierarchy format is simply not compatible). Their names are<br/>
		/// surrounded by <br/>
		/// e.g.<br/>
		/// <br/>
		/// .<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MName;

		/// <summary>
		/// The transformation relative to the node's parent. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mTransformation")]
		[NativeName(NativeNameType.Type, "aiMatrix4x4")]
		public Matrix4x4 MTransformation;

		/// <summary>
		/// Parent node. nullptr if this node is the root node. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mParent")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MParent;

		/// <summary>
		/// The number of child nodes of this node. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumChildren")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumChildren;

		/// <summary>
		/// The child nodes of this node. nullptr if mNumChildren is 0. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mChildren")]
		[NativeName(NativeNameType.Type, "aiNode * *")]
		public unsafe AiNode** MChildren;

		/// <summary>
		/// The number of meshes of this node. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumMeshes")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumMeshes;

		/// <summary>
		/// The meshes of this node. Each entry is an index into the<br/>
		/// mesh list of the #aiScene.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMeshes")]
		[NativeName(NativeNameType.Type, "unsigned int *")]
		public unsafe uint* MMeshes;

		/// <summary>
		/// Metadata associated with this node or nullptr if there is no metadata.<br/>
		/// Whether any metadata is generated depends on the source file format. See the<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mMetaData")]
		[NativeName(NativeNameType.Type, "aiMetadata *")]
		public unsafe AiMetadata* MMetaData;


		public unsafe AiNode(AiString mName = default, Matrix4x4 mTransformation = default, AiNode* mParent = default, uint mNumChildren = default, AiNode** mChildren = default, uint mNumMeshes = default, uint* mMeshes = default, AiMetadata* mMetaData = default)
		{
			MName = mName;
			MTransformation = mTransformation;
			MParent = mParent;
			MNumChildren = mNumChildren;
			MChildren = mChildren;
			MNumMeshes = mNumMeshes;
			MMeshes = mMeshes;
			MMetaData = mMetaData;
		}


	}

}
