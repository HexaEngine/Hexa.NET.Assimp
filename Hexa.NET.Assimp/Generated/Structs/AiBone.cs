// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// <br/>
	/// A bone has a name by which it can be found in the frame hierarchy and by<br/>
	/// which it can be addressed by animations. In addition it has a number of<br/>
	/// influences on vertices, and a matrix relating the mesh position to the<br/>
	/// position of the bone at the time of binding.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiBone")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiBone
	{
		/// <summary>
		/// The name of the bone.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mName")]
		[NativeName(NativeNameType.Type, "aiString")]
		public AiString MName;

		/// <summary>
		/// The number of vertices affected by this bone.<br/>
		/// The maximum value for this member is #AI_MAX_BONE_WEIGHTS.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNumWeights")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint MNumWeights;

		/// <summary>
		/// The bone armature node - used for skeleton conversion<br/>
		/// you must enable aiProcess_PopulateArmatureData to populate this<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mArmature")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MArmature;

		/// <summary>
		/// The bone node in the scene - used for skeleton conversion<br/>
		/// you must enable aiProcess_PopulateArmatureData to populate this<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mNode")]
		[NativeName(NativeNameType.Type, "aiNode *")]
		public unsafe AiNode* MNode;

		/// <summary>
		/// The influence weights of this bone, by vertex index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mWeights")]
		[NativeName(NativeNameType.Type, "aiVertexWeight *")]
		public unsafe AiVertexWeight* MWeights;

		/// <summary>
		/// Matrix that transforms from mesh space to bone space in bind pose.<br/>
		/// This matrix describes the position of the mesh<br/>
		/// in the local space of this bone when the skeleton was bound.<br/>
		/// Thus it can be used directly to determine a desired vertex position,<br/>
		/// given the world-space transform of the bone when animated,<br/>
		/// and the position of the vertex in mesh space.<br/>
		/// It is sometimes called an inverse-bind matrix,<br/>
		/// or inverse bind pose matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mOffsetMatrix")]
		[NativeName(NativeNameType.Type, "aiMatrix4x4")]
		public Matrix4x4 MOffsetMatrix;


		public unsafe AiBone(AiString mName = default, uint mNumWeights = default, AiNode* mArmature = default, AiNode* mNode = default, AiVertexWeight* mWeights = default, Matrix4x4 mOffsetMatrix = default)
		{
			MName = mName;
			MNumWeights = mNumWeights;
			MArmature = mArmature;
			MNode = mNode;
			MWeights = mWeights;
			MOffsetMatrix = mOffsetMatrix;
		}


	}

}
