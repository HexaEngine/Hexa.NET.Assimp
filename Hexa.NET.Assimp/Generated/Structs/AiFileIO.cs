// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ----------------------------------------------------------------------------------<br/>
	/// <br/>
	/// Provided are functions to open and close files. Supply a custom structure to<br/>
	/// the import function. If you don't, a default implementation is used. Use custom<br/>
	/// file systems to enable reading from other sources, such as ZIPs<br/>
	/// or memory locations. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "aiFileIO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AiFileIO
	{
		/// <summary>
		/// Function used to open a new file<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OpenProc")]
		[NativeName(NativeNameType.Type, "aiFile * (*)() *")]
		public unsafe void* OpenProc;

		/// <summary>
		/// Function used to close an existing file<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CloseProc")]
		[NativeName(NativeNameType.Type, "void (*)() *")]
		public unsafe void* CloseProc;

		/// <summary>
		/// User-defined, opaque data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UserData")]
		[NativeName(NativeNameType.Type, "char *")]
		public unsafe byte* UserData;


		public unsafe AiFileIO(delegate*<AiFile*> openProc = default, delegate*<void> closeProc = default, byte* userData = default)
		{
			OpenProc = (delegate*<AiFile*>*)openProc;
			CloseProc = (delegate*<void>*)closeProc;
			UserData = userData;
		}


	}

}
