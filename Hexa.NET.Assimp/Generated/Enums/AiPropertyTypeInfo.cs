// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// <br/>
	/// ---------------------------------------------------------------------------<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Enum, "aiPropertyTypeInfo")]
	[Flags]
	public enum AiPropertyTypeInfo : int
	{
		/// <summary>
		/// Array of single-precision (32 Bit) floats<br/>
		/// It is possible to use aiGetMaterialInteger[Array]() (or the C++-API<br/>
		/// aiMaterial::Get()) to query properties stored in floating-point format.<br/>
		/// The material system performs the type conversion automatically.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiPTI_Float")]
		[NativeName(NativeNameType.Value, "1")]
		PtiFloat = unchecked(1),

		/// <summary>
		/// Array of double-precision (64 Bit) floats<br/>
		/// It is possible to use aiGetMaterialInteger[Array]() (or the C++-API<br/>
		/// aiMaterial::Get()) to query properties stored in floating-point format.<br/>
		/// The material system performs the type conversion automatically.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiPTI_Double")]
		[NativeName(NativeNameType.Value, "2")]
		PtiDouble = unchecked(2),

		/// <summary>
		/// The material property is an aiString.<br/>
		/// Arrays of strings aren't possible, aiGetMaterialString() (or the<br/>
		/// C++-API aiMaterial::Get()) *must* be used to query a string property.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiPTI_String")]
		[NativeName(NativeNameType.Value, "3")]
		PtiString = unchecked(3),

		/// <summary>
		/// Array of (32 Bit) integers<br/>
		/// It is possible to use aiGetMaterialFloat[Array]() (or the C++-API<br/>
		/// aiMaterial::Get()) to query properties stored in integer format.<br/>
		/// The material system performs the type conversion automatically.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiPTI_Integer")]
		[NativeName(NativeNameType.Value, "4")]
		PtiInteger = unchecked(4),

		/// <summary>
		/// Simple binary buffer, content undefined. Not convertible to anything.<br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiPTI_Buffer")]
		[NativeName(NativeNameType.Value, "5")]
		PtiBuffer = unchecked(5),

		[NativeName(NativeNameType.EnumItem, "_aiPTI_Force32Bit")]
		[NativeName(NativeNameType.Value, "2147483647")]
		PtiForce32Bit = unchecked(2147483647),
	}
}
