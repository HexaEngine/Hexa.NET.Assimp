// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Assimp
{
	/// <summary>
	/// ---------------------------------------------------------------------------<br/>
	/// <br/>
	/// If you're familiar with OpenGL or D3D, these flags aren't new to you.<br/>
	/// They define *how* the final color value of a pixel is computed, basing<br/>
	/// on the previous color at that pixel and the new color value from the<br/>
	/// material.<br/>
	/// The blend formula is:<br/>
	/// <br/>
	/// where DestColor is the previous color in the frame-buffer at this<br/>
	/// position and SourceColor is the material color before the transparency<br/>
	/// calculation.<br/>
	/// This corresponds to the #AI_MATKEY_BLEND_FUNC property.<br/>
	/// </summary>
	[NativeName(NativeNameType.Enum, "aiBlendMode")]
	[Flags]
	public enum AiBlendMode : int
	{
		/// <summary>
		/// Formula:<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiBlendMode_Default")]
		[NativeName(NativeNameType.Value, "0")]
		Default = unchecked(0),

		/// <summary>
		/// Additive blending<br/>
		/// Formula:<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "aiBlendMode_Additive")]
		[NativeName(NativeNameType.Value, "1")]
		Additive = unchecked(1),

		[NativeName(NativeNameType.EnumItem, "_aiBlendMode_Force32Bit")]
		[NativeName(NativeNameType.Value, "2147483647")]
		Force32Bit = unchecked(2147483647),
	}
}
